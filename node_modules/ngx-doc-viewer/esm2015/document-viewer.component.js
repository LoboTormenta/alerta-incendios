import { __awaiter, __decorate } from "tslib";
import { Component, Input, NgZone, OnDestroy, OnChanges, SimpleChanges, Output } from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { take } from 'rxjs/operators';
import { interval } from 'rxjs';
import { EventEmitter } from '@angular/core';
let NgxDocViewerComponent = class NgxDocViewerComponent {
    constructor(domSanitizer, ngZone) {
        this.domSanitizer = domSanitizer;
        this.ngZone = ngZone;
        this.fullUrl = null;
        this.externalViewer = false;
        this.docHtml = '';
        this.configuredViewer = 'google';
        this.checkIFrameSubscription = null;
        this.loaded = new EventEmitter();
        this.url = '';
        this.googleCheckInterval = 3000;
        this.disableContent = 'none';
        this.googleCheckContentLoaded = true;
    }
    ngOnDestroy() {
        if (this.checkIFrameSubscription) {
            this.checkIFrameSubscription.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes && changes.viewer && (changes.viewer.isFirstChange || changes.viewer.currentValue !== changes.viewer.previousValue)) {
                if (this.viewer !== 'google' && this.viewer !== 'office' && this.viewer !== 'mammoth' && this.viewer !== 'pdf') {
                    console.error(`Unsupported viewer: '${this.viewer}'. Supported viewers: google, office, mammoth and pdf`);
                }
                if (this.viewer === 'mammoth') {
                    if (mammoth === null) {
                        console.error('please install mammoth when using local viewer');
                    }
                }
                this.configuredViewer = this.viewer;
            }
            if (this.disableContent !== 'none' && this.viewer !== 'google') {
            }
            if ((changes.url && changes.url.currentValue !== changes.url.previousValue) ||
                changes.viewer && changes.viewer.currentValue !== changes.viewer.previousValue) {
                this.docHtml = '';
                this.externalViewer = this.configuredViewer === 'google' || this.configuredViewer === 'office';
                if (this.checkIFrameSubscription) {
                    this.checkIFrameSubscription.unsubscribe();
                }
                if (!this.url) {
                    this.fullUrl = null;
                }
                else if (this.configuredViewer === 'office' || this.configuredViewer === 'google'
                    || this.configuredViewer === 'pdf') {
                    const u = this.url.indexOf('/') ? encodeURIComponent(this.url) : this.url;
                    this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.configuredViewer === 'google' ?
                        `https://docs.google.com/gview?url=${u}&embedded=true` :
                        this.configuredViewer === 'office' ?
                            `https://view.officeapps.live.com/op/embed.aspx?src=${u}` :
                            this.url);
                    // see:
                    // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives
                    // hack to reload iframe if it's not loaded.
                    // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.
                    if (this.configuredViewer === 'google' && this.googleCheckContentLoaded) {
                        this.ngZone.runOutsideAngular(() => {
                            let iframe = document.querySelector('iframe');
                            this.checkIFrame(iframe);
                            // if it's not loaded after the googleIntervalCheck, then open load again.
                            this.checkIFrameSubscription = interval(this.googleCheckInterval)
                                .pipe(take(Math.round(this.googleCheckInterval === 0 ? 0 : 20000 / this.googleCheckInterval)))
                                .subscribe(() => {
                                if (iframe == null) {
                                    iframe = document.querySelector('iframe');
                                    this.checkIFrame(iframe);
                                }
                                this.reloadIFrame(iframe);
                            });
                        });
                    }
                }
                else if (this.configuredViewer === 'mammoth') {
                    if (!mammoth) {
                        console.error('Please install mammoth and make sure mammoth.browser.min.js is loaded.');
                    }
                    this.docHtml = yield this.getDocxToHtml(this.url);
                }
            }
        });
    }
    checkIFrame(iframe) {
        if (iframe) {
            iframe.onload = () => {
                this.loaded.emit(null);
                if (this.checkIFrameSubscription) {
                    this.checkIFrameSubscription.unsubscribe();
                }
            };
        }
    }
    reloadIFrame(iframe) {
        if (iframe) {
            console.log('reloading..');
            iframe.src = iframe.src;
        }
    }
    getDocxToHtml(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const arrayBuffer = yield this.fileToArray(url);
            const resultObject = yield mammoth.convertToHtml({ arrayBuffer });
            return resultObject.value;
        });
    }
    fileToArray(url) {
        return new Promise((resolve, reject) => {
            try {
                const request = new XMLHttpRequest();
                request.open('GET', url, true);
                request.responseType = 'blob';
                request.onload = () => {
                    const reader = new FileReader();
                    reader.readAsArrayBuffer(request.response);
                    reader.onloadend = (e) => {
                        resolve(reader.result);
                    };
                };
                request.send();
            }
            catch (_a) {
                reject(`error while retrieving file ${url}.`);
            }
        });
    }
};
NgxDocViewerComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: NgZone }
];
__decorate([
    Output()
], NgxDocViewerComponent.prototype, "loaded", void 0);
__decorate([
    Input()
], NgxDocViewerComponent.prototype, "url", void 0);
__decorate([
    Input()
], NgxDocViewerComponent.prototype, "googleCheckInterval", void 0);
__decorate([
    Input()
], NgxDocViewerComponent.prototype, "disableContent", void 0);
__decorate([
    Input()
], NgxDocViewerComponent.prototype, "googleCheckContentLoaded", void 0);
__decorate([
    Input()
], NgxDocViewerComponent.prototype, "viewer", void 0);
NgxDocViewerComponent = __decorate([
    Component({
        selector: 'ngx-doc-viewer',
        template: "<ng-container *ngIf=\"!externalViewer\">\r\n    <div\r\n        *ngIf=\"configuredViewer !== 'pdf'\"\r\n        [innerHtml]=\"docHtml\"\r\n    ></div>\r\n    <embed\r\n        *ngIf=\"configuredViewer === 'pdf'\"\r\n        type=\"application/pdf\"\r\n        [src]=\"fullUrl\"\r\n        style=\"width: 100%; height: 100%;\"\r\n    />\r\n</ng-container>\r\n<ng-container *ngIf=\"externalViewer\">\r\n    <iframe\r\n        *ngIf=\"fullUrl && disableContent === 'none'\"\r\n        id=\"iframe\"\r\n        frameBorder=\"0\"\r\n        [src]=\"fullUrl\"\r\n    ></iframe>\r\n    <div\r\n        class=\"container\"\r\n        *ngIf=\"disableContent !== 'none'\"\r\n    >\r\n        <div\r\n            [class.overlay-full]=\"disableContent === 'all'\"\r\n            [class.overlay-popout-google]=\"configuredViewer ==='google' && (disableContent === 'popout' || disableContent === 'popout-hide')\"\r\n            [class.overlay-popout-office]=\"configuredViewer ==='office' && (disableContent === 'popout' || disableContent === 'popout-hide')\"\r\n            [style.background-color]=\"disableContent === 'popout-hide' ? '#fff': 'transparent'\"\r\n        >\r\n        </div>\r\n        <iframe\r\n            *ngIf=\"fullUrl\"\r\n            id=\"iframe\"\r\n            frameBorder=\"0\"\r\n            [src]=\"fullUrl\"\r\n        ></iframe>\r\n    </div>\r\n</ng-container>",
        styles: [`:host {
        display: block;
    }
    .container {
        width: 100%;
        height: 100%;
        position: relative;
    }
    .overlay-popout-google {
        width: 40px;
        height: 40px;
        right: 26px;
        top: 11.5px;
        position: absolute;
        z-index: 1000;
    }
    .overlay-popout-office {
        width: 100px;
        height: 20px;
        right: 0;
        bottom: 0;
        position: absolute;
        z-index: 1000;
    }
    .overlay-full {
        width: 100%;
        height: 100%;
        right: 0;
        top: 0;
        position: absolute;
        z-index: 1000;
    }
    iframe {
        width: 100%;
        height: 100%;
    }
    `]
    })
], NgxDocViewerComponent);
export { NgxDocViewerComponent };
//# sourceMappingURL=data:application/json;base64,